pipeline {
    agent {
        label 'gelkinsrunner'
    }
    environment {
        AZURE_CONFIG_DIR="${env.WORKSPACE}/.azure"
        // # The password expires every 5 days.
        END_DATE=sh(returnStdout: true, script: '''date '+%Y-%m-%dT%H:%M:%SZ+0000' --date='+ 5 days 12AM' ''').trim()
    }
    options {
        timeout(time: 20, unit: 'MINUTES')
        retry (3)
    }
    stages {
        stage('Prepare'){
            steps {
                echo "Running ${env.JOB_NAME} in ${env.WORKSPACE} on node ${env.NODE_NAME}. Jenkins: ${env.JENKINS_URL}"
                cleanWs(patterns: [[pattern: '*', type: 'INCLUDE']])
                sh 'printenv; ls -la'
            }
        }
        stage('Login to Azure') {
            options { retry(3) }
            agent {
                docker {
                    image 'mcr.microsoft.com/azure-cli'
                    label 'gelkinsrunner'
                    reuseNode true
                }
            }
            steps {
                withCredentials([file(credentialsId: 'PSGEL300_keyCert.pem', variable: 'CERTIFICATE_FILE'), azureServicePrincipal('PSGEL300SP')]) {
                    sh label: 'Login to Azure', script: '''
                        az login --service-principal -u "${AZURE_CLIENT_ID}" -p "${CERTIFICATE_FILE}" -t "${AZURE_TENANT_ID}"
                        az account set -s "${AZURE_SUBSCRIPTION_ID}"
                    '''

                    sh label: 'Create a new password', script: '''
                        RESULT=$(az ad sp credential reset --name "${AZURE_CLIENT_ID}" --end-date "${END_DATE}" --append)
                        echo $RESULT | jq -r .password > PSGEL300_Secret.txt
                    '''

                    sh label: 'Remove expired passwords', script: '''
                        NOW=$(date '+%Y-%m-%dT%H:%M:%SZ+0000' )
                        # Find expired credentials
                        CREDENTIALS=$(az ad sp credential list --id "${AZURE_CLIENT_ID}" --query "[?endDate < '${NOW}'].keyId" -o tsv)
                        for CRED in ${CREDENTIALS}; do
                           echo "Removing expired credential"
                           az ad sp credential delete --id "${AZURE_CLIENT_ID}" --key-id "${CRED}"
                        done
                    '''
                }
            }
        }
        stage('Save the password on the filer'){
           steps {
               // this is glsuser1 credential
               withCredentials([sshUserPrivateKey(credentialsId: "7ce97be5-68bf-4cbe-93db-7e5dc3564f5f", keyFileVariable: 'keyfile')]) {
                    sh label: 'Save the password', script: '''
                            # Copy the file
                            scp -i "${keyfile}" -o "StrictHostKeyChecking=no" PSGEL300_Secret.txt glsuser1@gelweb.race.sas.com:/data/workshops/PSGEL300_001/security/
                            ## verify
                            curl -s https://gelweb.race.sas.com/scripts/PSGEL300_001/security/PSGEL300_Secret.txt | grep 404 && exit 127 || exit 0
                        '''
               }
           }
        }

    }
    post{
        always{
            echo "====++++always++++===="

        }
        success{
            echo "====++++only when successful++++===="
            mail to: "${EMAILS}", \
                subject: "Jenkins ${env.JOB_NAME} Pipeline - Success", \
                body: "<b>Project: ${env.JOB_NAME}</b> <br>\
                    Build Number: ${env.BUILD_NUMBER} <br>\
                    URL of build: ${env.BUILD_URL} <br> <br>", \
                charset: 'UTF-8', \
                mimeType: 'text/html';

        }
        failure{
            echo "====++++only when failed++++===="
            mail to: "${EMAILS}", \
                subject: "Jenkins ${env.JOB_NAME} Pipeline - FAIL", \
                body: "<b>Project: ${env.JOB_NAME}</b> <br>\
                    Build Number: ${env.BUILD_NUMBER} <br>\
                    URL of build: ${env.BUILD_URL} <br> <br>", \
                charset: 'UTF-8', \
                mimeType: 'text/html';
        }
        cleanup{
            echo "====++++cleanUp++++===="
            cleanWs(patterns: [[pattern: '*', type: 'INCLUDE']])
            // to be sure we erase any Azure login
            dir ('.azure') {
                deleteDir()
            }
        }
    }
}